
import java.lang.Math;

import com.leapmotion.leap.*;
import com.leapmotion.leap.Gesture.State;

class SampleListener extends Listener {
	private double speed = 0;
	private double volume = 0;
	private final double DELTA_S = .001;
	private final double DELTA_V = .5;

	public void onInit(Controller controller) {
		System.out.println("Initialized");
	}

	public void onConnect(Controller controller) {
		System.out.println("Connected");
		controller.enableGesture(Gesture.Type.TYPE_SWIPE);
		controller.enableGesture(Gesture.Type.TYPE_CIRCLE);
		controller.enableGesture(Gesture.Type.TYPE_SCREEN_TAP);
		controller.enableGesture(Gesture.Type.TYPE_KEY_TAP);
	}

	public double getTempo() {
		return speed;
	}

	public double getVolume() {
		return volume;
	}

	public void onDisconnect(Controller controller) {
		// Note: not dispatched when running in a debugger.
		System.out.println("Disconnected");
	}

	public void onExit(Controller controller) {
		System.out.println("Exited");
	}

	public void onFrame(Controller controller) {
		// Get the most recent frame and report some basic information
		Frame frame = controller.frame();
		// song.tempoChange(speed);
		// song.volumeChange(volume);

		GestureList gestures = frame.gestures();
		for (int i = 0; i < gestures.count(); i++) {
			Gesture gesture = gestures.get(i);

			switch (gesture.type()) {
			case TYPE_CIRCLE:
				CircleGesture circle = new CircleGesture(gesture);

				// Calculate clock direction using the angle between circle
				// normal and pointable

				if (circle.pointable().direction().angleTo(circle.normal()) <= Math.PI / 2) {
					// Clockwise if angle is less than 90 degrees
					speed += DELTA_S;
				} else {
					speed -= DELTA_S;
				}

				// Calculate angle swept since last frame
				double sweptAngle = 0;
				if (circle.state() != State.STATE_START) {
					CircleGesture previousUpdate = new CircleGesture(controller.frame(1).gesture(circle.id()));
					sweptAngle = (circle.progress() - previousUpdate.progress()) * 2 * Math.PI;
				}

				break;
			case TYPE_SWIPE:
				SwipeGesture swipe = new SwipeGesture(gesture);
				if (swipe.pointable().direction().getX() > 0) {
					volume += DELTA_V;
				} else {
					volume -= DELTA_V;
				}

				break;
			case TYPE_SCREEN_TAP:
				ScreenTapGesture screenTap = new ScreenTapGesture(gesture);

				break;
			case TYPE_KEY_TAP:
				KeyTapGesture keyTap = new KeyTapGesture(gesture);

				break;
			default:
				// System.out.println("Unknown gesture type.");
				break;
			}
		}

		if (!frame.hands().isEmpty() || !gestures.isEmpty()) {
			// System.out.println();
		}
	}
}

public class MusicModifier {

	private double tempo;
	private double volume;
	private String name;
	private SampleListener listener;
	private Controller controller = new Controller();
	private int bpm;

	public MusicModifier(String songName, int beats) {
		bpm = 4 * beats;
		name = songName;
		listener = new SampleListener();
		controller = new Controller();
		tempo = 0;
		volume = 0;
	}

	public int getBPM() {
		return bpm;
	}

	public double getTempo() {
		return tempo;
	}

	public double getVolume() {
		return volume;
	}

	public void play() {

		// TODO Auto-generated method stub

		System.out.println("Press Enter to quit...");

		// creates the pseudo-Song thing
		double[] d = StdAudio.read(name);
		// stores double values into an array and then converts that array into
		// its playable version
		double[] songArray = new double[d.length / 2];
		for (int i = 0; i < d.length / 2; i++) {
			songArray[i] = d[2 * i];
		}
		double samplingWindow = 44100.0 / (bpm / 60);

		controller.addListener(listener);

		for (int i = 0; i < songArray.length; i += samplingWindow) {

			for (int j = i; j < i + samplingWindow * Math.pow(1.5, -tempo) && j < songArray.length; j++) {

				tempo = listener.getTempo();
				volume = listener.getVolume();
				if (j > i + samplingWindow) {
					StdAudio.play(Math.pow(1.05, volume) * songArray[j - (i + (int) (samplingWindow + 1))]);

				} else {
					StdAudio.play(Math.pow(1.05, volume) * songArray[j]);
				}

			}

		}

		/*
		 * try { System.in.read(); } catch (IOException e) {
		 * e.printStackTrace();
		 * 
		 * }
		 */

		// Remove the sample listener when done
		controller.removeListener(listener);
	}

	public static void main(String[] args) {

		MusicModifier m = new MusicModifier("brahms.wav", 130);
		m.play();

		/*
		 * // TODO Auto-generated method stub // Create a sample listener and
		 * controller SampleListener listener = new SampleListener(); Controller
		 * controller = new Controller(); String name = args[0]; int bpm = 4*
		 * Integer.parseInt(args[1]);
		 * 
		 * System.out.println("Press Enter to quit...");
		 * 
		 * //creates the pseudo-Song thing double tempo = 0; double volume = 0;
		 * double[] d = StdAudio.read(name); //stores double values into an
		 * array and then converts that array into its playable version double[]
		 * songArray = new double[d.length/2]; for (int i = 0; i < d.length/2 ;
		 * i++) { songArray[i] = d[2*i]; } double samplingWindow =
		 * 44100.0/(bpm/60);
		 * 
		 * 
		 * controller.addListener(listener);
		 * 
		 * 
		 * for(int i = 0; i < songArray.length; i += samplingWindow) {
		 * 
		 * for(int j = i; j < i + samplingWindow * Math.pow(1.5,-tempo) && j <
		 * songArray.length; j++) {
		 * 
		 * tempo = listener.getTempo(); volume = listener.getVolume(); if(j > i
		 * + samplingWindow) { StdAudio.play(Math.pow(1.05, volume) *
		 * songArray[j - (i + (int) (samplingWindow+1))]);
		 * 
		 * } else { StdAudio.play(Math.pow(1.05, volume) * songArray[j]); }
		 * 
		 * 
		 * }
		 * 
		 * 
		 * }
		 * 
		 * /*try { System.in.read(); } catch (IOException e) {
		 * e.printStackTrace();
		 * 
		 * }
		 */

		/*
		 * // Remove the sample listener when done
		 * controller.removeListener(listener); }
		 */

	}
}
